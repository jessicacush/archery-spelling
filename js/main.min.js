// Complete JavaScript file with intentional bugs for placement test
// This includes ALL original functionality with 4 bugs introduced

var bitmap = (function(){
	
	var element = {};
	
	var create = function(name, image_url, posX, posY, fileType){
		bitmap.element[name] = new createjs.Bitmap(image_url);
		bitmap.element[name].regX = bitmap.element[name].image.width/2;
		bitmap.element[name].regY = bitmap.element[name].image.height/2;
		bitmap.element[name].x = posX;
		bitmap.element[name].y = posY;
	}

	return {
		create : create,
		element : element
	};
	
})();

var container = (function(){
	
	var element = {};
	
	var create = function(name, posX, posY){
		container.element[name] = new createjs.Container();
		container.element[name].x = posX;
		container.element[name].y = posY;
	}
	
	return {
		create : create,
		element : element
	};
	
})();

var text = (function(){
	
	var element = {};

	var create = function (name, text_string, fontWeight, fontsize, font, color, align, posX, posY){
		text.element[name] = new createjs.Text(text_string, fontWeight + " " + fontsize + "px " + font , color);
		text.element[name].textAlign = align;
		text.element[name].textBaseline = "alphabetic";
		text.element[name].x = posX;
		text.element[name].y = posY;
	}
	
	return {
		create : create,
		element : element
	};
	
})();

var random = (function(){

	var d = new Date(),
		time = d.getTime().toString();
	Math.seedrandom(time);
	
	var number = function(max){
		return Math.floor(Math.random() * max) + 1;
	}
	
	var numberBetween = function(min,max){
	    return Math.floor(Math.random()*(max-min+1)+min);
	}
	
	var arraysEqual = function(a, b) {
		if (a === b) return true;
		if (a == null || b == null) return false;
		if (a.length !== b.length) return false;
		
		for (var i = 0; i < a.length; ++i) {
			if (a[i] !== b[i]) return false;
		}
		return true;
	}
	
	var shuffle = function(array) {
		var currentIndex = array.length, 
			temporaryValue, 
			randomIndex,
			originalArray = [];
		
		for (i = 0; i < array.length; i++) {
			originalArray[i] = array[i];
		}
		
		if(array.length > 1){
			do {
				currentIndex = array.length;
				while (0 !== currentIndex) {
					randomIndex = Math.floor(Math.random() * currentIndex);
					currentIndex -= 1;
					temporaryValue = array[currentIndex];
					array[currentIndex] = array[randomIndex];
					array[randomIndex] = temporaryValue;
				}
			} while ( arraysEqual(array, originalArray) );
		}
		
		return array;
	}

	return {
		number : number,
		numberBetween : numberBetween,
		shuffle : shuffle
	};
	
})();

var gameData = {
	"questionNumber" : 0,
	"questionCount": 0,
	"results" : {
		"correct" : {
			"data" : 0,
			"label" : "Correct Answers",
			"record" : []
		}
	},
	"reset" : function(){
		for (key in gameData.results) {
			gameData.results[key].data = 0;
		}
		if( gameData.activity.bank.useBank ){
			if(gameData.questionNumber > gameData.activity.level.length){
				gameData.questionNumber = 0;
			}
		}else{
			gameData.questionNumber = 0;
		}
		gameData.questionCount = 0;
		gameData.results.correct.record = [];
	}
	
};

var scale,
	$gameFrame = $("#game-frame"),
	gameFrameHeight = $gameFrame.outerHeight(),
	gameFrameWidth = $gameFrame.outerWidth(),
	$wrapper = $("#scaleable-wrapper");

$(window).resize(function(){
	var scaledata = { 
		size: {
			width: $wrapper.width(),
			height: $wrapper.height()
		}
	}
	doResize(null, scaledata);
});

function doResize(event, ui) {
	var origin;
	
	scale = Math.min(
		ui.size.width / gameFrameWidth,    
		ui.size.height / gameFrameHeight
	);
	
	$gameFrame.css({
		transform: "translate(-50%, -50%) " + "scale(" + scale + ")"
	});
}

var starterData = { 
	size: {
		width: $(window).width(),
		height: $(window).height()
	}
}

//Mute audio if browser isn't in focus
$(window).focus(function() {
	window.Howler.mute(false);
}).blur(function() {
	 window.Howler.mute(true);
});

var audio = (function(){
	
	//Add audio
	var create = function(audioId, audioFile, audioLoop){
		audio[audioId] = new Howl({
		  src: [audioFile],
		  format: ['mp3'],
		  autoplay: false,
		  loop: audioLoop,
		  volume: 1
		});	
	};
	
	return {
		create : create,
	};
	
})();

var animation = (function(){
	var hoverOn = function(element){
		var timeline = gsap.timeline();
		timeline.set(element, {scale:1})
				.to(element, {scale:1.1, duration:0.3,  ease:"Power2.easeOut"});
	};
	
	var hoverOff = function(element){
		var timeline = gsap.timeline();
		timeline.set(element, {scale:1.1})
				.to(element, {scale:1, duration:0.3, ease:"Power2.easeOut"});
	};
	
	var mouseDown = function(element){
		var timeline = gsap.timeline();
		timeline.to(element, {scale:0.9, duration:0.15, ease:"Power2.easeOut"})
	};
	
	var mouseUp = function(element){
		var timeline = gsap.timeline();
		timeline.to(element, {scale:1, duration:0.15, ease:"Power2.easeOut"})
	};
	
	var blackOut = function(element){
		var timeline = gsap.timeline();
		timeline.to(element, {display: "block", duration:0})
				.to(element, {opacity: 1, duration:0.3, ease:"Power1.easeOut"})
				.to(element, {opacity: 0, duration:0.3, ease:"Power1.easeIn"})
				.to(element, {display: "none", duration:0})
	}
	
	return {
		hoverOn : hoverOn,
		hoverOff : hoverOff,
		mouseDown : mouseDown,
		mouseUp : mouseUp,
		blackOut : blackOut
	};
	
})();

var Button = function(element){
	this.element = document.getElementById(element);
	this.element.addEventListener("mouseover", function(){	
		animation.hoverOn(this);
	});
	this.element.addEventListener("mouseout", function(){	
		animation.hoverOff(this);
	});
	this.element.addEventListener("mousedown", function(){	
		animation.mouseDown(this);
	});
	this.element.addEventListener("mouseup", function(){	
		animation.mouseUp(this);
	});
	this.element.addEventListener("touchstart", function(evt){	
		evt.preventDefault();
		if(!this.disabled){
			this.disabled=true;
			var self = this;
			setTimeout(function(){self.disabled=false}, 500);
		}
	});
	this.element.addEventListener("click", function(evt){	
		evt.preventDefault();
		if(!this.disabled){	
			this.disabled=true;
			var self = this;
			setTimeout(function(){self.disabled=false}, 500);
		}
	});
};

Button.prototype.changeSection = function(section){
	this.element.addEventListener("touchstart", function(evt){
		evt.preventDefault();
		view.section(section);
	});
	this.element.addEventListener("click", function(evt){
		evt.preventDefault();
		view.section(section);
	});
};

Button.prototype.playAudio = function(sfx){
	this.element.setAttribute('listener', 'true');
	element = this.element;
	this.element.addEventListener("touchstart", function(evt){
		evt.preventDefault();
		audio[sfx].stop();
		audio[sfx].play();
	});
	this.element.addEventListener("click", function(evt){
		evt.preventDefault();
		audio[sfx].stop();
		audio[sfx].play();
	});
};

Button.prototype.stopAudio = function(sfx){
	this.element.addEventListener("touchstart", function(evt){
		evt.preventDefault();
		sfx.stop();
	});
	this.element.addEventListener("click", function(evt){
		evt.preventDefault();
		sfx.stop();
	});
};

Button.prototype.runFunction = function(func, arg1, arg2){
	this.element.addEventListener("touchstart", function(evt){
		evt.preventDefault();
		if(!this.running){	
			this.running=true;
			var self = this;
			setTimeout(function(){
				self.running=false
			}, 300);
			func(arg1, arg2);
		}
	});
	this.element.addEventListener("click", function(evt){
		evt.preventDefault();
		if(!this.running){	
			this.running=true;
			var self = this;
			setTimeout(function(){
				self.running=false
			}, 300);
			func(arg1, arg2);
		}
	});
};

var view = (function (){
	
	var allSections = [],
		allComponents = $(".component");

	var section = function(sectionID) {
		for (var i = 0; i < allSections.length; i++){
			if (allSections[i] !== "ios-devices" || allSections[i] !== "other-devices" || allSections[i] !== "swipe-up" && device.viewport.width() > device.viewport.height()) {
				$("#"+allSections[i]).fadeOut(300);
			}
		}
		window.scrollTo(0, 0);
		$("#"+sectionID).delay(300).fadeIn(300);
	};
	
	var component = function(componentID, bool) {
		if(bool){	
			$("#"+componentID).fadeIn(300);
		}else{
			$("#"+componentID).fadeOut(300);
		}
	};
	
	var init = function(){
		//populate all array with section ids
		$("body").find("section").each(function(){ 
			allSections.push(this.id);
			$("#"+this.id).hide();
		});
		allComponents.hide();
		$("body").css("display","block");
		doResize(null, starterData);
		topUI.init();
		bottomUI.init();
		window.onresize = function(){
			topUI.init();
			bottomUI.resize();
		};
	};
  
  	return {
	  	init : init,
		section : section,
		component : component
	};

})();

var sprite = (function(){
	
	var element = {};
	
	var setup = function(canvasName, spriteData){
		
		var frame = {
			'width': spriteData._frames[0].rect.width,
			'height': spriteData._frames[0].rect.height
		}
		
		var canvasElement = document.getElementById(canvasName);
 		canvasElement.width = frame.width;
 		canvasElement.height = frame.height;
 		canvasElement.style.width = frame.width/2+"px";
 		canvasElement.style.height = frame.height/2+"px";
		
		var canvasStage = canvas.element[canvasName+"Stage"];
		
		sprite.element[canvasName] = new createjs.Sprite(spriteData, "idle")
		sprite.element[canvasName].x = sprite.element[canvasName].y = 0;
		
		canvasStage.addChild(sprite.element[canvasName]);
 	}
 	
	return {
		setup : setup,
		element : element
	};

})();

var canvas = (function(){
	
	var element = {};
	
	var setup = function (canvasElement, canvasWidth, canvasHeight){	
		createjs.Ticker.timingMode = createjs.Ticker.RAF;
		
		var canvasElementName = document.getElementById(canvasElement);
		if(canvasWidth !== null || canvasWidth !== undefined){
			canvasElementName.width = canvasWidth;
			canvasElementName.height = canvasHeight;
			canvasElementName.style.width = canvasWidth/2+"px";
			canvasElementName.style.height = canvasHeight/2+"px";
		}
		canvas.element[canvasElement+"Stage"] = new createjs.Stage(canvasElementName);
		
		var context = canvas.element[canvasElement+"Stage"].canvas.getContext("2d");
		context.scale(2,2);
		context.imageSmoothingEnabled = context.mozImageSmoothingEnabled = false;
		
		createjs.Ticker.addEventListener("tick", canvas.element[canvasElement+"Stage"]);
	};
	
	return {
		setup : setup,
		element : element
	};
 	
})();

var load = (function (){
	
	var queue,
		assets,
		assetsData,
		spriteData = {},
		loadingTextAnimation,
		loadingText = $("#loadingText");
	
	var onComplete = function(event) {
		if(load.assetsData.assets.spritesheets){
		}
		load.assets = queue;
		loadingTextAnimationEnd();
		introScreen.init();
	}
	
	var onDataComplete = function(event) {
		queue = new createjs.LoadQueue(false, parentThemeUrl);
		queue.setMaxConnections(999);
		queue.on('fileload', onFileLoad);
		queue.on('fileprogress', onFileProgress);
		queue.on('progress', onProgress);
		queue.on('complete', onComplete);
		queue.on('error', onError);
		
		if(gameData.activity.settings.shuffle){
			gameData.activity.level = random.shuffle(gameData.activity.level);
		}
		
		getGraphic(load.assetsData);
		getImage(load.assetsData);
		getAudio(load.assetsData);
		getRecordings(load.assetsData);
		getSpritesheet(load.assetsData);
	}

	var onError = function(event) {
		console.log('Error', event);
	}

	var onFileLoad = function(event) {
		if(queue.getResult("activityJson") != undefined || queue.getResult("activityJson") != null){
			var activityData = queue.getResult("activityJson");
			if(typeof activity !== 'undefined'){	
				activityData.activity.level = activity.level;
				activityData.activity.bank = activity.bank;
				activityData.activity.keyboard = activity.keyboard;
				activityData.activity.settings = activity.settings;
			}
			gameData.activity = activityData.activity;
			
			if(gameData.activity.settings.shuffle){
				gameData.activity.level = random.shuffle(gameData.activity.level);
			}
			
			topUI.displayExitButton();
		}
		if(queue.getResult("assetsJson") != undefined || queue.getResult("assetsJson") != null){
		load.assetsData = queue.getResult("assetsJson");
		if(typeof assetsManifest !== 'undefined'){
				if(assetsManifest.assets.images !== 'undefined' || assetsManifest.assets.images.length > 0){
					load.assetsData.assets.images = assetsManifest.assets.images;
				}
				if(assetsManifest.assets.audio !== 'undefined' || assetsManifest.assets.audio.length > 0){
					load.assetsData.assets.audio = assetsManifest.assets.audio;
				}
				if(assetsManifest.assets.recordings !== 'undefined' || assetsManifest.assets.recordings.length > 0){
					load.assetsData.assets.recordings = assetsManifest.assets.recordings;				
				}
				if(assetsManifest.assets.spritesheets !== 'undefined' || assetsManifest.assets.spritesheets.length > 0){
					load.assetsData.assets.spritesheets = assetsManifest.assets.spritesheets;
				}
			}
		}
		if(queue.getResult("jetpacker") != undefined || queue.getResult("jetpacker") != null){
			spriteData["jetpacker"] = queue.getResult("jetpacker");
		}
	}
	
	var onFileProgress = function(event) {
		//console.log('File progress', event);
	}
	
	var onProgress = function(event) {
		var progress = Math.round(event.loaded * 100);
	}
	
	var getGraphic = function(data){
		for(var i=0; i < data.assets.graphics.length; i++){
			queue.loadFile(data.assets.graphics[i]);
		}
	};
	
	var getImage = function(data){
		for(var i=0; i < data.assets.images.length; i++){
			if(data.assets.images[i].src != ""){
				queue.loadFile(data.assets.images[i]);
			}
		}
	};
	
	var getAudio = function(data){
		for(var i=0; i < data.assets.audio.length; i++){
			audio.create(data.assets.audio[i].id, data.assets.audio[i].filename, data.assets.audio[i].loop);
		}
	};
	
	var getRecordings = function(data){
		if(data.assets.recordings.length !== 0) {
			if( gameData.activity.bank.useBank ) {
				var count = gameData.activity.bank.count,
					audioId;
				for(var i=gameData.activity.bank.count; i < (gameData.activity.bank.numberOfQuestionPerGame+gameData.activity.bank.count); i++){
					if(gameData.activity.level[count].audio !== ""){	
						var audioIdCount = 0;
						
						audioId = gameData.activity.level[count].audio;
						while(audioId !== data.assets.recordings[audioIdCount].id){
							audioIdCount++;
						}
						audio.create(data.assets.recordings[audioIdCount].id, data.assets.recordings[audioIdCount].filename, data.assets.recordings[audioIdCount].loop);
					}
					count++;
					if(count == gameData.activity.level.length){
						count = 0;
					}
				}
			} else {
				for(var i=0; i < data.assets.recordings.length; i++){
					audio.create(data.assets.recordings[i].id, data.assets.recordings[i].filename, data.assets.recordings[i].loop);
				}
			}
		}
	
	};
	
	var getSpritesheet = function(data){
		if (data.assets.spritesheets) {
			for(var i=0; i < data.assets.spritesheets.length; i++){
				 queue.loadFile(data.assets.spritesheets[i]);
			 }
		}
		
	};
	
	var data = function(){
		queue = new createjs.LoadQueue(false, parentThemeUrl);
		queue.setMaxConnections(999);
		queue.on('complete', onDataComplete);
		queue.on('error', onError);
		queue.on('fileload', onFileLoad);
		queue.on('fileprogress', onFileProgress);
		queue.on('progress', onProgress);
		
		//load in activity data
		var jsons = {
			"manifest": [
				{id:"assetsJson", type:"json", src:"json/assetsManifest.json"},
				{id:"activityJson", type:"json", src:"json/activity.json"}
			]
		};
		
		queue.loadManifest(jsons);
	};
	
	var init = function(){
		loadingTextAnimation = gsap.timeline({repeat:-1, yoyo:true});
		
		loadingTextAnimation.to("#loadingText", {opacity:0.1, duration:0.9, ease:"Sine.easeInOut"});
		view.section('introScreen');
		view.component('bottom-ui-label', true);
		view.component('credits', true);
		data();
	};
	
	var loadingTextAnimationEnd = function(){
		loadingTextAnimation.kill();
		loadingText.hide();
	}
	
	return {
		init : init,
		assets : assets,
		assetsData : assetsData,
		getRecordings : getRecordings
	};

})();

var progressBar = (function(){
	
	var progressBarElement = document.getElementById('progressBar');
	
	var setupBar = function(activityLength){
		$('#progressBar').empty();
		
		var progressWidth = 100,
			marginRight = 1,
			progressBarElementWidth = ( progressWidth - ( marginRight * (activityLength - 1) ) ) / activityLength;
		
		for (var i = 0; i < activityLength; i++){
			var progressBarElementContainer = document.createElement('div');
			progressBarElementContainer.setAttribute('class', 'progress-pill progress-pill-empty');
			progressBarElementContainer.style.width = progressBarElementWidth + "%";
			progressBarElement.appendChild(progressBarElementContainer);
		}
	}
	
	// BUG 2: PROGRESS BAR OFF-BY-ONE ERROR - Adding 1 when it shouldn't
	var highlightBarPill = function(answer,levelNo){
		if(answer){
			$(".progress-pill:eq(" + levelNo + ")").toggleClass("progress-pill-empty progress-pill-success");
		}else{
			$(".progress-pill:eq(" + levelNo + ")").toggleClass("progress-pill-empty progress-pill-danger");
		}
	}
	
	var clearBar = function(){
		$('.progressBar').empty();
	}
	
	var init = function(activityLength){
		setupBar(activityLength);
	}

	return {
		init : init,
		highlightBarPill : highlightBarPill,
		clearBar : clearBar
	};
	
})();

var uiCounter = (function(){
	
	var uiCounterElement = document.getElementById('uiCounter'),
		count = 3,
		amount;
	
	var reduce = function(){
		uiCounter.amount--;
		var timeline = gsap.timeline();
		timeline.to('#fullCounter'+uiCounter.amount, {opacity:0, duration:0.3, ease:"Power2.easeOut"});
	}
	
	var setup = function(){
		var emptyCountersContainer = document.getElementById('emptyCounters'),
			fullCountersContainer = document.getElementById('fullCounters');
		
		emptyCountersContainer.innerHTML = "";
		fullCountersContainer.innerHTML = "";
		
		for(var i=0;i < count; i++){
			emptyCountersContainer.innerHTML += '<img class="emptyCounter" id="emptyCounter'+i+'" src="'+ parentThemeUrl +'images@2X/counterEmpty.svg" width="33.5" height="33" alt="Empty Counter">'
			fullCountersContainer.innerHTML += '<img class="fullCounter" id="fullCounter'+i+'" src="'+ parentThemeUrl +'images@2X/counterFull.svg" width="33.5" height="33" alt="Full Counter">'
		}
	}
	
	var init = function(){
		uiCounter.amount = count;
		var timeline = gsap.timeline();
		timeline.to(".fullCounter", {opacity:1, duration:0.3, ease:"Power2.easeOut"});
	}

	return {
		init : init,
		setup : setup,
		amount : amount,
		reduce : reduce
	};
	
})();

var hangmanSpellingAnimation = (function(){
	
	var originalArrowStartPosition = {
		'left': 874.9533,
		'top': 280.2542
	};
	
	var originalArrowPositions = [
		{
			'left': 873,
			'top': 153
		},
		{
			'left': 915,
			'top': 195
		},
		{
			'left': 793,
			'top': 77
		},
		{
			'left': 748,
			'top': 54
		}
	];
	
	var getOffsetSettings = function() {
		if (typeof gameData !== 'undefined' && 
			gameData.activity && 
			gameData.activity.settings && 
			gameData.activity.settings.planeOffset) {
			return gameData.activity.settings.planeOffset;
		}
		return { x: 0, y: 0 };
	};
	
	var getArrowStartPosition = function() {
		var offset = getOffsetSettings();
		return {
			'left': originalArrowStartPosition.left + offset.x,
			'top': originalArrowStartPosition.top + offset.y
		};
	};
	
	var getArrowPositions = function() {
		var offset = getOffsetSettings();
		return originalArrowPositions.map(function(pos) {
			return {
				'left': pos.left + offset.x,
				'top': pos.top + offset.y
			};
		});
	};
	
	var target = document.getElementById("gameTarget"),
		arrow = document.getElementById("gameArrow"),
		arrowPositionNumbered;
	
	var fadeInGameElements = function(){
		view.component("hangman-keyboard", true);
		view.component("hangman-container", true);
	}
	
	var fadeOutGameElements = function(){
		view.component("hangman-keyboard", false);
		view.component("hangman-container", false);
	}
	
	var shoot = function(){
		var currentArrowPositions = getArrowPositions();
		var currentStartPosition = getArrowStartPosition();
		
		if (hangmanSpellingAnimation.arrowPositionNumbered == (currentArrowPositions.length - 1)){
			if(audio["arrowMiss"]) audio["arrowMiss"].play();
		} else {
			if(audio["arrow"]) audio["arrow"].play();
		}
		
		var timeline = gsap.timeline();
		timeline.set("#gameArrow", {left: currentStartPosition.left, top: currentStartPosition.top, opacity: 1, scale: 1});
		timeline.to('#gameArrow', {left:currentArrowPositions[hangmanSpellingAnimation.arrowPositionNumbered].left, duration:0.5, ease:"none"})
				.to('#gameArrow', {top:currentArrowPositions[hangmanSpellingAnimation.arrowPositionNumbered].top, duration:0.5, ease:"none"}, "-=0.5")
				.to('#gameArrow', {scale:0.25, duration:0.5, ease:"Power2.none"}, "-=0.5");
		
		if (hangmanSpellingAnimation.arrowPositionNumbered == (currentArrowPositions.length - 1)){
			timeline.to('#gameArrow', {scale:0, duration:0.5, ease:"Power2.none"});
		}
	}
	
	var changeArrowPosition = function(){
		hangmanSpellingAnimation.arrowPositionNumbered++;
	}
	
	var start = function(){
		var currentStartPosition = getArrowStartPosition();
		arrow.style.opacity = 0;
		arrow.style.transform = "scale(1)";
		arrow.style.left = currentStartPosition.left + "px";
		arrow.style.top = currentStartPosition.top + "px";
		hangmanSpellingAnimation.arrowPositionNumbered = 0;
	}
	
	var getCurrentSettings = function() {
		var currentOffset = getOffsetSettings();
		return {
			offset: currentOffset,
			arrowStartPosition: getArrowStartPosition(),
			arrowLandingPositions: getArrowPositions(),
			originalPositions: {
				start: originalArrowStartPosition,
				landing: originalArrowPositions
			}
		};
	}
		
	return {
		fadeInGameElements : fadeInGameElements,
		fadeOutGameElements : fadeOutGameElements,
		shoot : shoot,
		changeArrowPosition : changeArrowPosition,
		start : start,
		getCurrentSettings : getCurrentSettings,
		arrowPositionNumbered : arrowPositionNumbered
	};
	
})();

var hangmanSpellingGame = (function(){
	
	var audioButtonContainer = document.getElementById('audio-button-container'),
		questionImage = document.getElementById('hangman-question-image'),
		questionWord = document.getElementById('hangman-word'),
		hintButtonElement = document.getElementById("hangman-hint-button"),
		questionText = "",
		questionTextArray = [],
		questionTextLength = 0,
		questionTextBlank = "",
		currentAnswer = [],
		currentAnswerCount = 0,
		hintButton,
		hintCount = 0,
		questionImageElement;
	var roundLocked = false;
	
	var setup = function(){
		hintButton = new Button('hangman-hint-button');
		hintButton.runFunction(getHint);
		questionWord.classList.add(gameData.activity.settings.answerTextSize);
	}
	
	var reset = function (){
		questionText = "",
		questionTextArray = [],
		questionTextLength = 0,
		questionTextBlank = "",
		currentAnswer = [],
		currentAnswerCount = 0,
		hintCount = 0;
	}
	
	// BUG 3: AUDIO BUTTON LOGIC ERROR - Changed != to == so button shows when there's NO audio
	var addQuestionAudio = function(questionNumber){
		audioButtonContainer.innerHTML = "";
		if (gameData.activity.settings.displayAudioButton) {
			if( gameData.activity.level[gameData.questionNumber].audio != "" && typeof gameData.activity.level[gameData.questionNumber].audio != "undefined") {
				var audioButton = "<div class='button' id='audio-button'><img src='"+ parentThemeUrl +"images@2X/audioIcon.svg' alt='audio' width='45' height='36' /></div>";
				audioButtonContainer.innerHTML = audioButton;
				this.gameAudioButton = new Button("audio-button");
				this.gameAudioButton.playAudio(gameData.activity.level[questionNumber].audio);
			}
		}
	}
	
	function playImageAudio(evt) {
		evt.preventDefault();
		if( gameData.activity.level[gameData.questionNumber].audio != "" && typeof gameData.activity.level[gameData.questionNumber].audio != "undefined") {
			audio[gameData.activity.level[gameData.questionNumber].audio].stop();
			audio[gameData.activity.level[gameData.questionNumber].audio].play();
		}
	}
	
	var addQuestionImage = function(questionNumber){
		questionImage.innerHTML = "";
		if( gameData.activity.level[questionNumber].image != "" ){
			questionImage.style.display = "block";
			
			questionImage.appendChild( load.assets.getResult(gameData.activity.level[questionNumber].image));
		} else {
			questionImage.style.display = "none";
		}
	}
	
	var splitIntoGraphemes = function(str) {
		if (typeof Intl !== 'undefined' && Intl.Segmenter) {
			const segmenter = new Intl.Segmenter('en', { granularity: 'grapheme' });
			const segments = segmenter.segment(str);
			return Array.from(segments).map(s => s.segment);
		} else {
			const result = [];
			let currentChar = '';
			
			for (let i = 0; i < str.length; i++) {
				const char = str.charAt(i);
				const code = str.charCodeAt(i);
				
				if (code >= 768 && code <= 879) {
					currentChar += char;
				} else {
					if (currentChar) {
						result.push(currentChar);
					}
					currentChar = char;
				}
			}
			
			if (currentChar) {
				result.push(currentChar);
			}
			
			return result;
		}
	};
	
	var addQuestionText = function(questionNumber){
		questionText = gameData.activity.level[questionNumber].word;
		questionTextArray = splitIntoGraphemes(questionText);
		questionTextLength = questionTextArray.length;
		questionTextBlank = "";
		currentAnswerCount = 0;
		hintCount = 0;
		
		for(var i=0; i<questionTextLength; i++){
			questionTextBlank += "_";
		}
		
		if (!gameData.activity.settings.useSolidLine) {
			questionWord.style.letterSpacing = 5 + "px";
		} else if (gameData.activity.settings.useSolidLine) {
			questionWord.style.letterSpacing = 0 + "px";
		}
		 
		currentAnswer = questionTextBlank.split("");
		questionWord.innerHTML = "<p>" + questionTextBlank + "</p>";
	}
	
	// BUG 4: HINT LOGIC ERROR - Includes all letters, not just missing ones
	var getHint = function () {
  if (hintCount !== 3) {
    var allKeys = document.getElementsByClassName("hangman-keyboard-key");
    var nextIdx = currentAnswerCount;
    while (nextIdx < questionTextLength && currentAnswer[nextIdx] && currentAnswer[nextIdx] !== "_") {
      nextIdx++;
    }
    if (nextIdx >= questionTextLength) return;

    var hintLetterRaw = questionTextArray[nextIdx];
    var hintLetter = (hintLetterRaw || "").toLowerCase();

    if (gameData.activity.settings.realKeyboard) {
      currentAnswer[nextIdx] = hintLetterRaw;
      currentAnswerCount = nextIdx + 1;
    } else {
      for (var i = 0; i < allKeys.length; i++) {
        if (allKeys[i].getAttribute("data-letter") === hintLetter) {
          allKeys[i].classList.add("hint-key");
          break;
        }
      }
      if (!currentAnswer[nextIdx] || currentAnswer[nextIdx] === "_") {
        currentAnswer[nextIdx] = hintLetterRaw;
        if (currentAnswerCount === nextIdx) currentAnswerCount++;
      }
    }

    questionWord.innerHTML = "<p>" + currentAnswer.join("") + "</p>";
    hintCount++;
    if (hintCount === 2) hintButtonElement.style.opacity = 0;
    if (currentAnswerCount === questionTextLength) answerCorrect(true);
  }
};

	// BUG 1: CASE SENSITIVITY ISSUE - Direct string comparison without case handling
	var checkAnswer = function(key) {
  var keyLetter = (key.getAttribute("data-letter") || "").toLowerCase();
		if (roundLocked || currentAnswerCount >= questionTextLength) return;

  if (gameData.activity.settings.realKeyboard) {
    var correctKey = false;

    if (keyLetter === (questionTextArray[currentAnswerCount] || "").toLowerCase()) {
      correctKey = true;
      currentAnswer[currentAnswerCount] = questionTextArray[currentAnswerCount];
      currentAnswerCount++;
      audio['correct'].play();
    }

    questionWord.innerHTML = "<p>" + currentAnswer.join('') + "</p>";

    if (currentAnswerCount == questionTextLength) {
      answerCorrect();
    }
    if (!correctKey) {
      answerWrong();
    }
  } else {
    var correctKey = false;
    key.classList.remove('hint-key');

    if (currentAnswerCount < questionTextLength) {
      var nextNeeded = (questionTextArray[currentAnswerCount] || "").toLowerCase();

      if (keyLetter === nextNeeded && (currentAnswer[currentAnswerCount] === "_" || !currentAnswer[currentAnswerCount])) {
        correctKey = true;
        currentAnswer[currentAnswerCount] = questionTextArray[currentAnswerCount];
        currentAnswerCount++;
        key.classList.add("correct-key");
        audio['correct'].play();
      } else {
        key.classList.add("wrong-key");
      }
    }

    questionWord.innerHTML = "<p>" + currentAnswer.join('') + "</p>";
    if (currentAnswerCount === questionTextLength) {
      answerCorrect();
    } else if (!correctKey) {
      answerWrong();
    }
  };


			
questionWord.innerHTML = "<p>" + currentAnswer.join('') + "</p>";
if (currentAnswerCount === questionTextLength) {
  answerCorrect();
} else if (!correctKey) {
  answerWrong();
}


questionWord.innerHTML = "<p>" + currentAnswer.join('') + "</p>";
if (currentAnswerCount === questionTextLength) {
  answerCorrect();
} else if (!correctKey) {
  answerWrong();
}

    questionWord.innerHTML = "<p>" + currentAnswer.join('') + "</p>";

    if (currentAnswerCount === questionTextLength) {
      answerCorrect();
    } else if (!correctKey) {
      answerWrong();
    }
  }

	
	var showInputElements = function(){
		var timeline = gsap.timeline();
		timeline.to('#hangman-keyboard', {opacity:1, duration:0.3, ease:"Power2.easeOut"}, "+=0.3")
				.to('#hangman-hint-button', {opacity:1, duration:0.3, ease:"Power2.easeOut"}, "-=0.3")
				.to('#audio-button', {opacity:1, duration:0.3, ease:"Power2.easeOut"}, "-=0.3")
	}
	
	var hideInputElements = function(){
		var timeline = gsap.timeline();
		timeline.to('#hangman-keyboard', {opacity:0, duration:0.3, ease:"Power2.easeOut"}, "+=0.3")
				.to('#hangman-hint-button', {opacity:0, duration:0.3, ease:"Power2.easeOut"}, "-=0.3")
				.to('#audio-button', {opacity:0, duration:0.3, ease:"Power2.easeOut"}, "-=0.3")
	}
	
	var answerCorrect = function(hint){
		if (roundLocked) return;
		roundLocked = true;
		
		if(hint){
			uiCounter.reduce();
			hangmanSpellingAnimation.changeArrowPosition();
		}else if(hint && currentAnswer.join('') == questionText ){
		}
		
		if( currentAnswer.join('') == questionText ){
			var delay = 2000;
			if( gameData.activity.level[gameData.questionNumber].audio != "" && typeof gameData.activity.level[gameData.questionNumber].audio != "undefined") {
				delay = audio[gameData.activity.level[gameData.questionNumber].audio]._duration * 1000;
			}
			feedback.view(true);
			
			hideInputElements();
			if( gameData.activity.level[gameData.questionNumber].audio != "" && typeof gameData.activity.level[gameData.questionNumber].audio != "undefined") {
				audio[gameData.activity.level[gameData.questionNumber].audio].play();
			}
			gameData.results.correct.data++
			gameData.results.correct.record[gameData.questionCount] = {
				"question" : questionText,
				"correct" : true
			}
			progressBar.highlightBarPill(true, gameData.questionCount);
			gameData.questionNumber++;
			if(gameData.questionNumber == gameData.activity.level.length && gameData.activity.bank.useBank) {
				gameData.questionNumber=0;
			}
			gameData.questionCount++;
			
			setTimeout(function(){
				hangmanSpellingAnimation.fadeOutGameElements();
				hangmanSpellingAnimation.shoot();
				
				setTimeout(function(){
					if(gameData.questionNumber == gameData.activity.level.length && !gameData.activity.bank.useBank){
						endScreen.init();
						view.section('endScreen');
					}else if(gameData.questionCount == gameData.activity.bank.numberOfQuestionPerGame && gameData.activity.bank.useBank){
						endScreen.init();
						view.section('endScreen');
					}else{
						hangmanSpellingGame.init();
					}
				}, 4000)
				
			}, delay);
		}
	}
	
	var answerWrong = function(hint){
		if (roundLocked) return;
		roundLocked = true;
		hangmanSpellingAnimation.changeArrowPosition();
		
		if(hint){
		}else{
		}
		uiCounter.reduce();
		
		if( uiCounter.amount == 0 || currentAnswer.join('') == questionText ){
			hangmanSpellingAnimation.shoot();
			
			if( gameData.activity.level[gameData.questionNumber].audio != "" && typeof gameData.activity.level[gameData.questionNumber].audio != "undefined") {
				var delay = ( audio[gameData.activity.level[gameData.questionNumber].audio]._duration * 1000 );
				feedback.view(false);
			}
			
			questionWord.innerHTML = "<p>" + questionText + "</p>";
			hideInputElements();
			gameData.results.correct.record[gameData.questionCount] = {
				"question" : questionText,
				"correct" : false
			}
			progressBar.highlightBarPill(false, gameData.questionCount);
			
			setTimeout(function(){
				if( gameData.activity.level[gameData.questionNumber].audio != "" && typeof gameData.activity.level[gameData.questionNumber].audio != "undefined") {
					audio[gameData.activity.level[gameData.questionNumber].audio].play();
				}
				gameData.questionNumber++;
				if(gameData.questionNumber == gameData.activity.level.length && gameData.activity.bank.useBank) {
					gameData.questionNumber=0;
				}
				gameData.questionCount++;
				setTimeout(function(){	
					hangmanSpellingAnimation.fadeOutGameElements();
					if(gameData.questionNumber == gameData.activity.level.length && !gameData.activity.bank.useBank){
						endScreen.init();
						view.section('endScreen');
					} else if(gameData.questionCount == gameData.activity.bank.numberOfQuestionPerGame && gameData.activity.bank.useBank) {
						endScreen.init();
						view.section('endScreen');	
					}else{
						hangmanSpellingGame.init();
					}
				}, delay);
				
			}, 1000);
		}else{
			audio['wrong'].play();
		}
	}
	
	var init = function(){
		roundLocked = false;
		keyboard.reset();
		uiCounter.init();
		hintButtonElement.style.opacity = 1;
		
		hangmanSpellingAnimation.start();
		
		setTimeout(function(){
			addQuestionAudio(gameData.questionNumber);
			addQuestionImage(gameData.questionNumber);
			addQuestionText(gameData.questionNumber);
		
			hangmanSpellingAnimation.fadeInGameElements();
			showInputElements();
			if( gameData.activity.level[gameData.questionNumber].audio != "" && typeof gameData.activity.level[gameData.questionNumber].audio != "undefined") {
				audio[gameData.activity.level[gameData.questionNumber].audio].play();
			}
		}, 1600);
	}
		
	return {
		reset : reset,
		setup : setup,
		checkAnswer : checkAnswer,
		init : init
	};
	
})();

var keyboard = (function(){
	
	var keyFunctions = function(element){
		var element = document.getElementById( element );
		
		if(uiCounter.amount > 0){
			hangmanSpellingGame.checkAnswer(element);
		}
	}
	
	var createKey = function(keyboardContainer, keyName){
		var newKey = document.createElement("div"); 
		newKey.setAttribute('class', 'hangman-keyboard-key');
		newKey.setAttribute('id', 'letter-'+keyName);
		newKey.setAttribute('data-letter', keyName);
		
		var newKeyP = document.createElement("p");
		var newKeyPText = document.createTextNode(keyName); 
		
		newKeyP.appendChild(newKeyPText);
		newKey.appendChild(newKeyP);
		keyboardContainer.appendChild(newKey);
		
		this.newKey = new Button('letter-'+keyName);
		this.newKey.runFunction(keyFunctions, 'letter-'+keyName);
	}
	
	var reset = function(){
		var allKeys = document.getElementsByClassName("hangman-keyboard-key");
		for(var i=0; i < allKeys.length; i++){
			allKeys[i].setAttribute('class', 'hangman-keyboard-key');
		}
	}
	
	var init = function(keyboardName){
		var keyboardContainer = document.getElementById(keyboardName),
			outerKeyboardContainer = document.getElementById("keyboard-container"),
			keyboardWidth,
			keyboardMaxWidth = 995.2,
			keyboardMaxHeight = 173,
			keyboardScale,
			keyWidth = 65.5,
			keyMarginAndBorder = 11,
			keyboardPadding = 5;
		
		for(var i=0; i<gameData.activity.keyboard.length; i++){
			createKey(keyboardContainer, gameData.activity.keyboard[i]);
		}
		
		keyboardWidth = ( (keyWidth + keyMarginAndBorder) * Math.round(gameData.activity.keyboard.length/2) ) + keyboardPadding;
		keyboardContainer.style.width = keyboardWidth + "px";
		
		if(gameData.activity.keyboard.length > 26){
			keyboardScale = keyboardMaxWidth/keyboardWidth;
			keyboardContainer.style.transform = "scale(" + keyboardScale + ")";
		}
		
	}
		
	return {
		init : init,
		reset : reset
	};
	
})();

var feedback = (function(){
	
	var correct = $("#correctFeedback"),
		wrong = $("#wrongFeedback");
	
	var view = function(answer){
		var feedback;
		if(answer){
			feedback = correct;
		}else{
			feedback = wrong;
		}
		
		var animation =  gsap.timeline();
		feedback.show();
		animation.set(feedback, {opacity:0, display:"block"})
				 .to(feedback, {opacity: 1, scale: 1.05, duration: 0.3, ease:"Power2.easeOut"})
				 .to(feedback, {opacity: 0, scale: 1.05, duration: 0.3, ease:"Power2.easeOut"}, "+=0.6")
				 .set(feedback, {display:"none"});
	}
	
	return {
		view : view
	};
	
})();

var Modal = function(element){
	element = document.getElementById(element);
	window.addEventListener('click', modalCLicked, false);
};
Modal.prototype.open = function(element){
	if(audio.messageBox) audio.messageBox.play();
	element = document.getElementById(element);
	modalInAnimation(element);
};
Modal.prototype.close = function(element){
	if(audio.button) audio.button.play();
	element = document.getElementById(element);
	modalOutAnimation(element);
};

var modalCLicked = function (event, element) {
	if (event.target == element) {
		if(audio.button) audio.button.play();
		modalOutAnimation(element);
		if(gameScreen.gameArea2 && gameScreen.gameArea2.style.display == 'block'){
			endlessRunner.start();
		}
		window.removeEventListener('click', modalCLicked, false);
		setTimeout(function(){
			window.addEventListener('click', modalCLicked, false);
		}, 400);
		
	}
};

var modalInAnimation = function(element){
	var animation = gsap.timeline();
	var content = element.getElementsByClassName("modal-content");
		animation.set(element, {css: {display: "none", opacity: "0"}});
		animation.set(content, {css: {top: "0%"}});
		animation.to(element, 0.4, {css: {display: "block", opacity: "1"}, ease:Power2.easeOut});
		animation.to(content, 0.4, {css: {top: "50%"}, ease:Power2.easeOut}, "-=0.4");
};

var modalOutAnimation = function(element){
	var animation = gsap.timeline();
	var content = element.getElementsByClassName("modal-content");
	animation.set(element, {css: {display: "block", opacity: "1"}});
	animation.set(content, {css: {top: "50%"}});
	animation.to(element, 0.4, {css: {display: "none", opacity: "0"}, ease:Power2.easeOut});
	animation.to(content, 0.4, {css: {top: "0%"}, ease:Power2.easeOut}, "-=0.4");
};

var endScreen = (function(){
	
	var scoreLabel = document.getElementById("score"),
		questionList = document.getElementById("questionList");
	
	var replay = function(){
		gameData.reset();
		setTimeout(function(){
			view.component('bottom-ui-label', false);
			view.component('credits', false);
			if( gameData.activity.bank.useBank ){
				progressBar.init(gameData.activity.bank.numberOfQuestionPerGame);
			} else {
				progressBar.init(gameData.activity.level.length);
			}
			setTimeout(function(){
				view.component('progressBar', true);
				view.component('bottom-ui-counter', true);
				view.component('feedback', true);
			}, 301);
			hangmanSpellingGame.reset();
			hangmanSpellingGame.init();
		}, 300);
	}
	
	var setup = function(){
		this.replayButton = new Button("replayButton");
		this.replayButton.changeSection('gameScreen');
		this.replayButton.runFunction(replay);
		this.replayButton.playAudio('click');
	}
	
	var init = function(){
		//LOAD NEXT QUESTION
		load.getRecordings(load.assetsData);
		
		view.component('progressBar', false);
		view.component('bottom-ui-counter', false);
		setTimeout(function(){
			view.component('bottom-ui-label', true);
			view.component('credits', true);
		}, 301);
		scoreLabel.innerHTML = gameData.results.correct.data;
		var n = gameData.results.correct.data;
var h = document.querySelector("#resultsPanel h2");
if (h) {
  h.textContent =
    n === 0 ? "Better luck next time!" :
    n === 1 ? "Nice start!" :
    n === 2 ? "So close!" :
    "Well done!";
}
		questionList.innerHTML = "";
		for(var i=0; i<gameData.results.correct.record.length; i++){
			if (gameData.results.correct.record[i].correct){
				questionList.innerHTML += '<p><img src="'+ parentThemeUrl +'images@2X/tickEndScreen.svg"/> '+ gameData.results.correct.record[i].question +'</p>';
			} else{
				questionList.innerHTML += '<p><img src="'+ parentThemeUrl +'images@2X/exclamationEndScreen.svg"/> '+ gameData.results.correct.record[i].question +'</p>';
			}
		}
	}
	
	return {
		setup : setup,
		init : init
	};
	
})();

var instructionsModal1,
	instructionsModal1Viewed = false;

var gameScreen = (function(){
	
	instructionsModal1 = new Modal("instructionsModal1");
	this.closeInstructionsModal1Button = new Button("closeInstructionsModal1Button");
	this.closeInstructionsModal1Button.runFunction(instructionsModal1.close, "instructionsModal1");
	this.closeInstructionsModal1Button.element.addEventListener('click', function(){
		keyboard.init('hangman-keyboard');
		hangmanSpellingGame.setup();
		hangmanSpellingGame.init();	
		if (typeof audio["introAudio"] != "undefined") {
			audio["introAudio"].stop();
		}
	});
	
	var setup = function(){
		
	}
	
	var init = function(){
		view.component('bottom-ui-label', false);
		view.component('credits', false);
		if( gameData.activity.bank.useBank ){
			progressBar.init(gameData.activity.bank.numberOfQuestionPerGame);
		} else {
			progressBar.init(gameData.activity.level.length);
		}
		
		if (!gameData.activity.settings.showInstructions){
			instructionsModal1Viewed = true;
		}
		
		setTimeout(function(){
			view.component('progressBar', true);
			view.component('bottom-ui-counter', true);
			view.component('feedback', true);
		}, 301);
		
		var delay = 1;
		if(gameData.activity.settings.waitForIntroAudio){
			if(audio["introAudio"] && audio["introAudio"]._duration) {
				delay = audio["introAudio"]._duration * 1000;
			}
		}
		if(!instructionsModal1Viewed && gameData.activity.settings.showInstructions){
			instructionsModal1.open("instructionsModal1");
			instructionsModal1Viewed = true;
			
		} else {
			setTimeout(function(){
				keyboard.init('hangman-keyboard');
				hangmanSpellingGame.setup();
				hangmanSpellingGame.init();	
			}, delay);
		}
		if (typeof audio["introAudio"] != "undefined") {
			audio["introAudio"].play();
		}
		
		
	}
	
	return {
		setup : setup,
		init : init
	};
	
})();

var introScreen = (function(){
	
	var playButton = document.getElementById("introPlayButton");
	
	var prepareGameScreen = function(){
		setTimeout(gameScreen.init, 300);
	}
	
	var setup = function(){
		this.playButton = new Button("introPlayButton");
		this.playButton.changeSection('gameScreen');
		this.playButton.runFunction(prepareGameScreen);
		this.playButton.playAudio('click');
	}
	
	var init = function(){
		playButton.style.display = "block";
	}
	
	return {
		setup : setup,
		init : init
	};
	
})();

var topUI = (function(){
	
	var exitButton = document.getElementById("exit-button"),
		audioButton = document.getElementById("audio-button"),
		titleContainer = document.getElementById("titleContainer"),
		resultsPanel = document.getElementById("resultsPanel"),
		hangmanKeyboard = document.getElementById("keyboard-container"),
		hangmanQuestionImage = document.getElementById("hangman-question-image"),
		hangmanContainer = document.getElementById("hangman-container"),
		hangmanArea = document.getElementById("hangman-area");
	
	var safeZone = {
			"width" : 1024,
			"height" : 681.75
		},
		aspectRatio169 = {
			"width" : 1212,
			"height" : 681.75
		},
		aspectRatio43 = {
			"width" : 1024,
			"height" : 768.5
		};
	
	var resize = function(){
		
		var windowSize = {},
			safeZoneActualSize = {},
			aspectRatio169ActualSize = {},
			aspectRatio43ActualSize = {};
		
		windowSize.width = window.innerWidth;
		windowSize.height = window.innerHeight;
		
		safeZoneActualSize.width = safeZone.width * scale;
		safeZoneActualSize.height = safeZone.height * scale;
		
		aspectRatio169ActualSize.width = aspectRatio169.width * scale;
		aspectRatio169ActualSize.height = aspectRatio169.height * scale;
		
		aspectRatio43ActualSize.width = aspectRatio43.width * scale;
		aspectRatio43ActualSize.height = aspectRatio43.height * scale;
		
		//Repositioning for width
		if(windowSize.width >= aspectRatio169ActualSize.width) {
			//Use 16:9 width positions
			exitButton.style.right = "-64.6105px";
		} else {
			//Use 4:3 width positions
			exitButton.style.right = "26.926px";
			
		}
		
		//Repositioning for height
		if(windowSize.height >= aspectRatio43ActualSize.height) {
			//Use 4:3 height positions
			exitButton.style.top = "-10.7522px";
			hangmanKeyboard.style.margin = "30px auto 0 auto";
			hangmanQuestionImage.style.width = "390px";
			hangmanQuestionImage.style.height = "267px";
			hangmanContainer.style.margin = "8px 0 0 186px";
			hangmanContainer.style.height = "452px";
			hangmanArea.style.maxHeight = "452px";
			titleContainer.style.margin = "32px auto 0";
			resultsPanel.style.margin = "32px auto 0";
		} else {
			//Use 16:9 height positions
			exitButton.style.top = "18.4144px";
			hangmanKeyboard.style.margin = "8px auto 0 auto";
			hangmanQuestionImage.style.width = "337px";
			hangmanQuestionImage.style.height = "217px";
			hangmanContainer.style.margin = "41px 0 0 186px";
			hangmanContainer.style.height = "419px";
			hangmanArea.style.maxHeight = "419px";
			titleContainer.style.margin = "61px auto 0";
			resultsPanel.style.margin = "61px auto 0";
		}
		
	}
		
	var exitGame = function(){
		window.history.back();
	}
	
	var displayExitButton = function() {
		if(gameData.activity.settings.displayExitButton){
			exitButton.classList.add("show");
		}
	}
		
	var init = function(){
		topUI.resize();
		this.exitButton = new Button("exit-button");
		this.exitButton.playAudio('click');
		this.exitButton.runFunction(topUI.exitGame);
	}
	
	return {
		init : init,
		resize : resize,
		exitGame : exitGame,
		displayExitButton : displayExitButton
	};
	
})();

var bottomUI = (function(){
		
	var safeZone = {
			"width" : 1024,
			"height" : 681.75
		},
		aspectRatio169 = {
			"width" : 1212,
			"height" : 681.75
		},
		aspectRatio43 = {
			"width" : 1024,
			"height" : 768.5
		};
	
	var resize = function(){
		
		var windowSize = {},
			safeZoneActualSize = {},
			aspectRatio169ActualSize = {},
			aspectRatio43ActualSize = {};
		
		windowSize.width = window.innerWidth;
		windowSize.height = window.innerHeight;
		
		safeZoneActualSize.width = safeZone.width * scale;
		safeZoneActualSize.height = safeZone.height * scale;
		
		aspectRatio169ActualSize.width = aspectRatio169.width * scale;
		aspectRatio169ActualSize.height = aspectRatio169.height * scale;
		
		aspectRatio43ActualSize.width = aspectRatio43.width * scale;
		aspectRatio43ActualSize.height = aspectRatio43.height * scale;
		
		var bottomUIElement = document.getElementById("bottom-ui"),
			bottomUIContainerElement = document.getElementById("bottom-ui-container");
		
		//Repositioning for width
		if(windowSize.width >= aspectRatio169ActualSize.width) {
			//Use 16:9 width positions
			bottomUIContainerElement.style.padding = "12px 45px";
		} else {
			//Use 4:3 width positions
			bottomUIContainerElement.style.padding = "12px 139px";
		}
		
		//Repositioning for height
		if(windowSize.height >= aspectRatio43ActualSize.height) {
			//Use 4:3 height positions
			bottomUIElement.style.height = "70px";
		} else {
			//Use 16:9 height positions
			bottomUIElement.style.height = "113.375px";
		}
		
	}
		
	var init = function(){
		creditsModal = new Modal("creditModal");
		this.openCreditModalButton = new Button("openCreditModalButton");
		this.openCreditModalButton.runFunction(creditsModal.open, "creditModal");
		this.openCreditModalButton.element.addEventListener('touchstart', function(){
			this.closeCreditModalButton = new Button("closeCreditModalButton");
			this.closeCreditModalButton.runFunction(creditsModal.close, "creditModal");
		});
		this.openCreditModalButton.element.addEventListener('click', function(){
			this.closeCreditModalButton = new Button("closeCreditModalButton");
			this.closeCreditModalButton.runFunction(creditsModal.close, "creditModal");
		});
		bottomUI.resize();
	};
	
	
	return {
		init : init,
		resize : resize
	};
	
	
})();

var loadingScreen = (function(){
		
	var init = function(){
		
	}
	
	return {
		init : init
	};
	
})();

$( document ).ready(function() {
	view.init();
	introScreen.setup();
	gameScreen.setup();
	endScreen.setup();
	load.init();
});
